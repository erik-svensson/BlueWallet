apply plugin: "com.android.application"
apply plugin: 'com.google.firebase.crashlytics'


import com.android.build.OutputFile

project.ext.envConfigFiles = [
    // requires lowercase
    devdebug: ".env.dev.testnet",
    stagedebug: ".env.stage.mainnet",
    proddebug: ".env.prod.mainnet",
    betadebug: ".env.beta.testnet",
    devrelease: ".env.dev.testnet",
    stagerelease: ".env.stage.mainnet",
    prodrelease: ".env.prod.mainnet",
    betarelease: ".env.beta.mainnet",
]



project.ext.react = [
    entryFile: "index.js",
    devDisabledInStaging: true,
    enableHermes: false,
    deleteDebugFilesForVariant: { false }
]

project.ext.sentryCli = [
    logLevel: "debug"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * def jscFlavor = 'org.webkit:android-jsc-intl:+'
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. Date.toLocaleString and String.localeCompare that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    flavorDimensions "default" 

    lintOptions {
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId project.env.get("APP_ID")
        resValue "string", "build_config_package", "io.goldwallet.wallet"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 15
        versionName "6.5.2"
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        resValue 'string', "CODE_PUSH_APK_BUILD_TIME", String.format("\"%d\"", System.currentTimeMillis())
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }

        debug {
            debuggable true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }
    productFlavors {
        beta {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'io.goldwallet.wallet.beta'
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "io.goldwallet.wallet"
        }
        dev {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'io.goldwallet.wallet.dev'
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "io.goldwallet.wallet"
        }
        stage {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'io.goldwallet.wallet.stage'
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "io.goldwallet.wallet"
        }
        prod {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId 'io.goldwallet.wallet'
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "io.goldwallet.wallet"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

repositories {
  mavenCentral()
}

dependencies {
    implementation 'com.google.firebase:firebase-core:16.0.3'
    implementation 'com.facebook.soloader:soloader:0.9.0+'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':react-native-config')
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(path: ":@react-native-firebase_analytics")
    implementation platform('com.google.firebase:firebase-bom:28.2.0')
    implementation project(':@sentry_react-native')
    implementation project(':react-native-secure-key-store')
    androidTestImplementation('com.wix:detox:+')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
